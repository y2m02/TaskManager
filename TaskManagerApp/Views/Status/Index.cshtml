@using TaskManagerApp.Models
@using TaskManagerApp.Models.ViewModels
@using TaskManagerApp.ApiHelpers
@{
    ViewData["Title"] = SpanishTitle.Status;
}

<h1>@SpanishTitle.Status</h1>

@(Html.Kendo().Grid<StatusViewModel>
    ()
    .Name("Statuses")
    .Columns(columns =>
    {
        columns.Bound(c => c.StatusId).Hidden();
        columns.Bound(c => c.Description);
        columns.Command(command => command.Custom("btnDelete")
            .Visible("deleteVisible")
            .Text("Eliminar")
            .Click("showRecordToDelete")
            ).Width(130);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create().Text("Agrear");
        toolbar.Save()
            .SaveText("Guardar cambios")
            .CancelText("Cancelar cambios");
    })
    .Editable(editable =>
        editable.Mode(GridEditMode.InCell)
    )
    .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(new[] {20, 35, 50})
        .Messages(msg => msg
            .Empty("Sin registros")
            .ItemsPerPage("registros por página")
            .First("Ir a la primera página")
            .Last("Ir a la última página")
            .Next("Página siguiente")
            .Previous("Página anterior")
            .Refresh("Refrescar")
            .Display("{0} - {1} de {2} registros")
            .Page("Página")
            .MorePages("Más páginas")))
    .Navigatable()
    .Sortable()
    .Filterable(filterable => filterable
        .Extra(true)
        .Operators(op =>
            op.ForString(str => str.Clear()
                .Contains("Contiene")
                .DoesNotContain("No contiene")
                .IsEqualTo("Es igual a")
                .IsNotEqualTo("Es diferente de")
                .StartsWith("Comienza con")
                .EndsWith("Termina con"))
                .ForDate(date => date.Clear()
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("Es diferente de")
                    .IsGreaterThanOrEqualTo("Mayor o igual que")
                    .IsGreaterThan("Despúes de")
                    .IsLessThanOrEqualTo("Hasta")
                    .IsLessThan("Antes de"))
                .ForNumber(num => num.Clear()
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("Es diferente de")
                    .IsGreaterThanOrEqualTo("Mayor o igual que")
                    .IsGreaterThan("Mayor que")
                    .IsLessThanOrEqualTo("Menor o igual que")
                    .IsLessThan("Menor que")))
        .Messages(msg => msg
            .Info("Mostrar registros con valor que:")
            .And("Y")
            .Or("O")
            .Filter("Filtrar")
            .Clear("Limpiar")))
    .Scrollable(s => s.Height(700))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(20)
        .ServerOperation(false)
        .Events(events => events.RequestEnd("onRequestEnd"))
        .Model(model => model.Id(p => p.StatusId))
        .Sort(s => s.Add("Description").Descending())
        .Read(read => read.Action("GetAll", "Status"))
        .Create(create => create.Action("BatchCreate", "Status"))
        .Update(update => update.Action("BatchUpdate", "Status"))
    ))

@await Html.PartialAsync("DeletePartial")

<script>
    function onRequestEnd(e) {
        redirectToIndex(e, "Statuses");
    }

    function showRecordToDelete(e) {
        e.preventDefault();

        var dataItem = this.dataItem(window.$(e.currentTarget).closest("tr"));

        window.$("#lblRecordId").html(dataItem.StatusId);

        window.$("#lblDeleteMessage").removeAttr("hidden");

        window.$("#btnDeleteStatus").removeAttr("hidden");

        window.$("#myModalDelete").modal();
    }

    window.$("#btnDeleteStatus").on("click",
        function() {
            deleteRecord("@ApiControllerName.Status", "Statuses");
        });
</script>