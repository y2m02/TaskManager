@using Kendo.Mvc
@using TaskManagerApp.ApiHelpers
@using TaskManagerApp.Models
@using TaskManagerApp.Models.ViewModels
@{
    ViewData["Title"] = SpanishTitle.Schedule;
}

<h1>@SpanishTitle.Schedule</h1>
<div>
    <div>
        <button id="btnOpenModal" type="button" class="btn btn-primary" @*data-toggle="modal" data-target="#myModalSchedule"*@>
            <i class="fas fa-plus"
               aria-hidden="true">
            </i>
            Crear
        </button>
        <br />
        <br />
    </div>
    @await Html.PartialAsync("CreatePartial")
    <div>
        @(Html.Kendo().Grid<ScheduleViewModel>()
            .Name("Schedules")
            .Columns(columns =>
            {
                columns.Bound(c => c.ScheduleId).Hidden();
                columns.Bound(c => c.AssignmentDescription).Width(150).Groupable(false);
                columns.Bound(c => c.StoreName).Width(100)
                    .Filterable(ftb => ftb
                        .Multi(true)
                        .CheckAll(false)
                        .Messages(msg => msg
                            .SelectedItemsFormat("{0} opciones seleccionadas"))
                    );
                columns.Bound(c => c.StatusDescription)
                    .Filterable(ftb => ftb
                        .Multi(true)
                        .CheckAll(false)
                        .Messages(msg => msg
                            .SelectedItemsFormat("{0} opciones seleccionadas"))
                        )
                    .ClientTemplate(@"<img src='images/statuses/#= StatusDescription #.png' class='rounded-circle' height='40' width='40' asp-append-version='true'/><div class='status-description'>#: StatusDescription #</div>")
                    .Width(110);
                columns.Bound(c => c.Date).Width(90).Format("{0:dd/MM/yyyy}");
                columns.Bound(c => c.Note).Width(100).Groupable(false);
                columns.Command(command =>
                {
                    command.Custom("Editar").HtmlAttributes(new Dictionary<string, object> {["class"] = "editButton"});
                    command.Custom("btnDelete")
                        .Visible("cancelVisible")
                        .Text("Cancelar")
                        .Click("showRecordToDelete");
                }).Width(150);
            })
            .Resizable(c => c.Columns(true))
            .Pageable(pageable => pageable
                .Refresh(true)
                .PageSizes(new[] {20, 35, 50})
                .Messages(msg => msg
                    .Empty("Sin registros")
                    .ItemsPerPage("registros por página")
                    .First("Ir a la primera página")
                    .Last("Ir a la última página")
                    .Next("Página siguiente")
                    .Previous("Página anterior")
                    .Refresh("Refrescar")
                    .Display("{0} - {1} de {2} registros")
                    .Page("Página")
                    .MorePages("Más páginas")))
            .Navigatable()
            .Sortable()
            .Groupable(g => g
                .Messages(m => m.Empty("Arrastre una columna hasta aquí para agrupar por dicha columna")))
            .Filterable(filterable => filterable
                .Extra(true)
                .Operators(op =>
                    op.ForString(str => str.Clear()
                        .Contains("Contiene")
                        .DoesNotContain("No contiene")
                        .IsEqualTo("Es igual a")
                        .IsNotEqualTo("Es diferente de")
                        .StartsWith("Comienza con")
                        .EndsWith("Termina con"))
                        .ForDate(date => date.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Despúes de")
                            .IsLessThanOrEqualTo("Hasta")
                            .IsLessThan("Antes de"))
                        .ForNumber(num => num.Clear()
                            .IsEqualTo("Es igual a")
                            .IsNotEqualTo("Es diferente de")
                            .IsGreaterThanOrEqualTo("Mayor o igual que")
                            .IsGreaterThan("Mayor que")
                            .IsLessThanOrEqualTo("Menor o igual que")
                            .IsLessThan("Menor que")))
                .Messages(msg => msg
                    .Info("Mostrar registros con valor que:")
                    .And("Y")
                    .Or("O")
                    .Filter("Filtrar")
                    .Clear("Limpiar")))
            .Scrollable(s => s.Height(700))
            .Events(e => e.DataBound("onDataBound"))
            .DataSource(dataSource => dataSource
                .Ajax()
                .PageSize(20)
                .ServerOperation(false)
                .Sort(s => s.Add("StatusDescription").Descending())
                .Model(model => model.Id(p => p.ScheduleId))
                .Read(read => read.Action("GetAll", "Schedule"))
            .Group(group => group.Add("Date", typeof(string), ListSortDirection.Ascending))
            .Group(group => group.Add("StatusDescription", typeof(string), ListSortDirection.Descending))
            .Group(group => group.Add("StoreName", typeof(string), ListSortDirection.Ascending))
            ))
    </div>
</div>
@await Html.PartialAsync("DeletePartial")

<script>
    function showRecordToDelete(e) {
        e.preventDefault();

        var dataItem = this.dataItem(window.$(e.currentTarget).closest("tr"));

        window.$("#lblRecordId").html(dataItem.ScheduleId);

        window.$("#lblCancelMessage").removeAttr("hidden");

        window.$("#btnDeleteSchedule").removeAttr("hidden");

        window.$("#myModalDelete").modal();
    }

    window.$("#btnDeleteSchedule").on("click",
        function () {
            deleteRecord("@ApiControllerName.Schedule", "Schedules");
        });

    function cancelVisible(dataItem) {
        return dataItem.StatusDescription != "Finalizada";
    }
</script>

<script src="~/js/schedule.js"></script>